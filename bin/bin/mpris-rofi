#!/usr/bin/env python
#
# Requires: mpris-ctl

import argparse
import operator
from subprocess import call, check_output
import sys
from typing import Generator, List, NamedTuple
# TODO find active player

from more_itertools import partition

SEP = "\uFFEF"


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("action", choices=['play', 'pause', 'playpause', 'next', 'prev', 'debug'])
    return parser.parse_args()


def mpris_info(fields) -> Generator[List[str], None, None]:
    output = check_output(['mpris-ctl', 'info', SEP.join('%' + f for f in fields)], text=True)
    for line in output.splitlines():
        yield line.split(SEP)


class Player(NamedTuple):
    name: str
    playing: bool
    artist: str
    track: str

    @classmethod
    def list(cls) -> List['Player']:
        fields = ['player_name', 'play_status', 'artist_name', 'track_name']
        return [cls(name, status == 'Playing', artist, track)
                for name, status, artist, track in mpris_info(fields)]

    def for_rofi(self) -> str:
        return f"{self.name} | {f'{self.artist} - ' if self.artist else ''}{self.track}"

    def command(self, cmd: str) -> int:
        if cmd == 'playpause':
            cmd = 'pause' if self.playing else 'play'
        return call(['mpris-ctl', '--player', self.name, cmd])


def rofi_prompt(prompt, options=(), *, mesg=None, default=None) -> str:
    cmd = [
        "rofi", "-dmenu",
        "-i",
        "-no-custom",
        "-matching", "fuzzy",
        "-p", prompt,
    ]
    if mesg:
        cmd += ["-mesg", mesg]
    if default:
        cmd += ["-filter", default]

    return check_output(cmd, text=True, input="\n".join(options)).rstrip("\n")


def main(params) -> int:
    all_players = Player.list()
    inactive_players, active_players = \
        map(list, partition(operator.attrgetter('playing'), all_players))

    if params.action == "debug":
        print("Active players:")
        for p in active_players:
            print(p)
        print("\nInactive players:")
        for p in inactive_players:
            print(p)
        return 0

    for players in [active_players, inactive_players]:
        if len(players) == 1:
            player = players[0]
        elif players:
            # Show rofi
            options = [p.for_rofi() for p in players]
            print(options)
            option = rofi_prompt("Player", options, mesg=f"Action: {params.action}")
            if not option:
                return 0
            player = players[options.index(option)]
        elif params.action == 'pause':
            # no active player
            return 0
        else:
            continue
        player.command(params.action)
        return 0

    print('No player found')
    return 1


if __name__ == '__main__':
    sys.exit(main(parse_args()))
