#!/usr/bin/env python

"""Simple but flexible screenshotting utility.

Uses flameshot for capturing the screen.
Asks for operations to perform
with the just created image (using rofi),
such as uploading to a website
or copying the path.
"""

import argparse
from functools import reduce
from pathlib import Path
from subprocess import CalledProcessError, Popen, check_output, run
import sys
import tempfile
import time

TOOL_NAME = "shot"
TEMPLATE = "/data/Images/Screenshots/%Y-%m-%d_%H-%M-%S.png"
URL = "https://0x0.st/"

# TODO convert to jpeg/webp
MESG = """\
Default: "sc"; negate with upper-case
Options:
  r: rename
  s: save
  c: copy image
  u: upload &amp; copy url
  d: dragon-drop
  p: copy image path (overrides cu)
  o: open image
"""


def rofi_prompt(prompt, *, mesg=None, default=None):
    cmd = [
        "rofi", "-dmenu",
        "-l", "0",
        "-p", prompt,
    ]
    if mesg:
        cmd += ["-mesg", mesg]
    if default:
        cmd += ["-filter", default]

    return check_output(cmd, text=True).strip()


def clip_copy(text):
    run(["xclip", "-selection", "clipboard"], input=text, text=True)


def notify(title, text="", icon=None):
    cmd = ["notify-send", "-a", TOOL_NAME, title, text]
    if icon:
        cmd += ["--icon", str(icon)]
    Popen(cmd)


def user_input(inp=None):
    if not inp:
        inp = rofi_prompt("opts [rscudpo]", mesg=MESG)
    opts = set(inp) - {" "}
    opts |= set("sc")
    opts = reduce(lambda x, c: x | {c} if c.islower() else x - {c.lower()},
                  sorted(opts, reverse=True),
                  set())

    if 'p' in opts:
        opts -= set("cu")
    if 'r' in opts:
        opts.add('s')

    return opts


def capture(mode, delay):
    if mode == 'window':
        cmd = ["maim", "--select", "--nodecorations=1"]
        if delay:
            cmd += [f"--delay={delay}"]

        try:
            image_data = check_output(cmd)
        except CalledProcessError:
            return None

    else:
        cmd = ["flameshot", mode, "-r"]
        if delay:
            cmd += [f"--delay={int(delay * 1000)}"]

        image_data = check_output(cmd)
        if image_data == b"screenshot aborted\n":
            return None

    return image_data


def main(params):
    path = Path(time.strftime(TEMPLATE))

    image_data = capture(params.mode, params.delay)
    if not image_data:
        notify("Screenshot aborted")
        return

    opts = user_input(params.opts)
    print(f"{opts=}")

    actions = []

    def ensure_path():
        """Write to a temporary file if it has not been saved already."""
        nonlocal path
        if not path.is_file():
            path = Path(tempfile.gettempdir(), TOOL_NAME, path.name)
            path.parent.mkdir(exist_ok=True)
            with path.open('bw') as file:
                file.write(image_data)
            actions.append(f"Saved to {path}")

    def pops(c: str) -> bool:
        if (has := c in opts):
            opts.remove(c)
        return has

    if pops('r'):
        new_stem = rofi_prompt("File name", default=path.stem,
                               mesg=f"{path.parent}/{{}}{path.suffix}")
        path = path.with_name(new_stem + path.suffix)

    if pops('s'):
        with path.open('bw') as file:
            file.write(image_data)
        actions.append(f"Saved to {path}")
        run(["recently_used", "--appname", "shot", str(path)])

    if pops('p'):
        ensure_path()
        clip_copy(str(path))
        actions.append("Copied path to clipboard")

    if pops('c'):
        run(["xclip", "-selection", "clipboard", "-t", "image/png"], input=image_data)
        actions.append("Copied image to clipboard")

    if pops('u'):
        url = check_output(["curl", "-F", f'file=@-;filename="{path.name}"', URL],
                           input=image_data).decode()
        clip_copy(url)
        actions.append(f"Uploaded to {url}")

    if pops('d'):
        ensure_path()
        Popen(["dragon-drop", str(path)])

    if pops('o'):
        ensure_path()
        Popen(["feh", str(path)])

    if opts:
        actions.append(f"Extraneous opts: {''.join(opts)}")

    notify("Screenshot taken", "\n".join(actions),
           icon=path if path.exists() else None)
    for a in actions:
        print(a)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("mode", nargs='?', choices=['gui', 'screen', 'full', 'window'],
                        help="Capture mode (default: 'gui')", default='gui')
    parser.add_argument("opts", nargs='?',
                        help="rscudpo; upper-case to disable; prompted if omitted")
    parser.add_argument("-d", "--delay", type=float)
    return parser.parse_args()


if __name__ == '__main__':
    sys.exit(main(parse_args()))
