#!/usr/bin/env python

# usage: set-default-sink [{speakers,headphones,hdmi}]
#
# Set the default sink (for PipeWire) using `pactl`,
# using a set of pre-defined conditions
# that can be selected with the first argument.

import json
import sys
import re
from functools import partial
from subprocess import check_call, check_output
from typing import Callable, NotRequired, TypedDict


class Port(TypedDict):
    type: NotRequired[str]
    availability: NotRequired[str]


class Sink(TypedDict):
    name: str
    ports: NotRequired[list[Port]]


def is_available_hdmi_sink(sink: Sink) -> bool:
    return any(
        p.get('type') == 'HDMI' and p.get('availability') != 'not available'
        for p in sink.get('ports', [])
    )


def is_sink_name_matching_regex(sink: Sink, regex: str) -> bool:
    return bool(re.match(regex, sink['name']))


FILTERS: dict[str, Callable[[Sink], bool]] = {
    'speakers': partial(
        is_sink_name_matching_regex,
        regex=(
            r'alsa_output\.pci-0000_00_\w{2}\..*\.analog-stereo'
            r'|alsa_output\.usb-Lenovo_ThinkPad_USB-C_Dock_Audio_.*\.analog-stereo'
        ),
    ),
    'headphones': partial(
        is_sink_name_matching_regex,
        regex=(
            r'alsa_output\.usb-Focusrite_Scarlett_Solo_USB_.*'
            r'|alsa_output\.usb-Plantronics_Plantronics_Blackwire_5220_Series_.*\.analog-stereo'
        ),
    ),
    'hdmi': is_available_hdmi_sink,
}


def main() -> int:
    if not (sink_filter := FILTERS.get(sys.argv[1])):
        print("unknown sink identifier")
        return 1

    output = check_output(["pactl", "--format", "json", "list", "sinks"])
    sinks: list[Sink] = json.loads(output)

    if sink := next(filter(sink_filter, sinks), None):
        print(f"setting default sink to: {sink['name']}")
        _ = check_call(["pactl", "set-default-sink", sink['name']])
        return 0
    else:
        print("no matching sink found")
        return 2


if __name__ == '__main__':
    sys.exit(main())
