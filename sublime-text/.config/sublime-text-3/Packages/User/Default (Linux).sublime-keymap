[
// basic overrides:
  //["ctrl+;"] -> ctrl+ü; "/" is actually the "#" key
  { "keys": ["ctrl+."], "command": "show_overlay", "args": {"overlay": "goto", "text": "#"} },
  //["ctrl+`"] -> ctrl+ö
  { "keys": ["f8"],     "command": "show_panel",   "args": {"panel": "console", "toggle": true} },
  // ["ctrl+g"]
  // { "keys": ["ctrl+."], "command": "show_overlay", "args": {"overlay": "goto", "text": ":"} },

  // swap pasting
  // { "keys": ["ctrl+shift+v"], "command": "paste" },
  // { "keys": ["ctrl+v"], "command": "paste_and_indent" },

  // ["ctrl+shift+k"]
  { "keys": ["alt+d"], "command": "run_macro_file",
    "args": {"file": "Packages/Default/Delete Line.sublime-macro"} },
  // ["ctrl+shift+d"]
  { "keys": ["ctrl+d"], "command": "duplicate_line" },
  // old ctrl+d alternatives
  { "keys": ["ctrl+shift+d"], "command": "find_under_expand" },

  // run on shift+f7
  { "keys": ["shift+f7"], "command": "build", "args": {"variant": "Run"} },

  // ctrl+tab overrides
  { "keys": ["ctrl+tab"], "command": "next_view" },
  { "keys": ["ctrl+shift+tab"], "command": "prev_view" },

  // SciTE's 'KP_-' behaviour || previously "ctrl+/" and "ctrl+shift+/" (-> "#" key)
  { "keys": ["keypad_minus"], "command": "toggle_comment", "args": { "block": false } },
  { "keys": ["ctrl+shift+keypad_minus"], "command": "toggle_comment", "args": { "block": true } },

  // allow [] to trigger "Add Line in Braces.sublime-macro" (mainly for json)
  { "keys": ["enter"], "command": "run_macro_file",
    "args": {"file": "Packages/Default/Add Line in Braces.sublime-macro"},
    "context": [
      { "key": "setting.auto_indent", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "[\\{\\[]$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^[\\}\\]]", "match_all": true }
    ]
  },

  // Auto-complete popup
  { "keys": ["ctrl+space"], "command": "auto_complete", "args": {"disable_auto_insert": true} },
  { "keys": ["ctrl+space"], "command": "replace_completion_with_auto_complete",
    "context": [
      { "key": "last_command", "operator": "equal", "operand": "insert_best_completion" },
      { "key": "auto_complete_visible", "operator": "equal", "operand": false },
      { "key": "setting.tab_completion", "operator": "equal", "operand": true }
    ]
  },


  // Word wrapping
  { "keys": ["ctrl+shift+w"], "command": "toggle_setting", "args": {"setting": "word_wrap"} },

  // indentation
  { "keys": ["ctrl+<"],   "command":   "indent" },
  { "keys": ["ctrl+>"],   "command": "unindent" },
  { "keys": ["ctrl+f12"], "command": "reindent" },

  // folding
  { "keys": ["ctrl+k", "ctrl+f"], "command":   "fold" },
  { "keys": ["ctrl+k", "ctrl+u"], "command": "unfold" },

  // Column layouts (due to neo keyboard)
  { "keys": ["shift+alt+\\"],
    "command": "set_layout",
    "args":
    {
      "cols": [0.0, 1.0],
      "rows": [0.0, 1.0],
      "cells": [[0, 0, 1, 1]]
    }
  },
  { "keys": ["shift+alt+3"],
    "command": "set_layout",
    "args":
    {
      "cols": [0.0, 0.5, 1.0],
      "rows": [0.0, 1.0],
      "cells": [[0, 0, 1, 1], [1, 0, 2, 1]]
    }
  },
  { // 3-pane layout
    "keys": ["alt+shift+4"],
    "command": "set_layout",
    "args":
    {
      "cols": [0.0, 0.5, 1.0],
      "rows": [0.0, 0.8, 1.0],
      "cells": [[0, 0, 1, 1], [1, 0, 2, 1], [0, 1, 2, 2]]
    }
  },

  // goto definition
  { "keys": ["ctrl+alt+r"], "command": "goto_definition" },

  // command palette
  { "keys": ["ctrl+alt+s"], "command": "show_overlay",
    "args": {"overlay": "command_palette", "text": "Set Syntax: "} },
  { "keys": ["ctrl+alt+b"], "command": "show_overlay",
    "args": {"overlay": "command_palette", "text": "Build With: "} },
  { "keys": ["ctrl+alt+g"], "command": "show_overlay",
    "args": {"overlay": "command_palette", "text": "git: "} },

  // make the "Build: Cancel" binding accessable
  { "keys": ["pause"], "command": "exec", "args": {"kill": true} },

  // re-add project switcher binding (removed in 3096)
  { "keys": ["ctrl+alt+p"], "command": "prompt_select_workspace" },

  // Toggle exec output
  { "keys": ["ctrl+f4"], "command": "show_panel", "args": {"panel": "output.exec"} },
  { "keys": ["ctrl+f4"], "command": "hide_panel", "args": {"panel": "output.exec"},
    "context": [
      { "key": "panel", "operand": "output.exec" }
    ]
  },

  // toggle selection in find panel
  { "keys": ["alt+s"], "command": "toggle_in_selection",
    "context": [
      { "key": "setting.is_widget", "operator": "equal", "operand": true }
    ]
  },

  { "keys": ["ctrl+alt+f"], "command": "slurp_find_string" },
  { "keys": ["ctrl+alt+shift+f"], "command": "slurp_replace_string" },


  // Auto-pair escaped curly brackets in tex
  { "keys": ["{"], "command": "insert_snippet", "args": {"contents": "{$0\\\\}"},
    "context": [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "\\\\$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(\\s|\\)|]|\\}|\\\\|$)", "match_all": true },
      { "key": "selector", "operand": "text.tex", "match_all": true }
    ]
  },
  { "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/User/Delete Left Right Twice.sublime-macro"},
    "context": [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "\\\\\\{$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\\\\\}", "match_all": true },
      { "key": "selector", "operand": "text.tex", "match_all": true }
    ]
  },
  { "keys": ["^"], "command": "insert_snippet", "args": {"contents": "^{${1:$SELECTION}}$0"},
    "context": [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
      { "key": "selector", "operator": "equal", "operand": "text.tex meta.environment.math" },
    ]
  },
  { "keys": ["_"], "command": "insert_snippet", "args": {"contents": "_{${1:$SELECTION}}$0"},
    "context": [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
      { "key": "selector", "operator": "equal", "operand": "text.tex meta.environment.math" },
    ]
  },

  // multi-selection (from Windows bindings)
  { "keys": ["ctrl+alt+up"], "command": "select_lines", "args": {"forward": false} },
  { "keys": ["ctrl+alt+down"], "command": "select_lines", "args": {"forward": true} },

  // OVERRIDES

  // open url
  { "keys": ["ctrl+u"], "command": "soft_undo" },

// my small plugins:

  // testing
  // { "keys": ["ctrl+super+c"], "command": "convert_csscheme" },
  // { "keys": ["ctrl+shift+b"], "command": "build", "args": {"variant": "Run"} },
  // { "keys": ["alt+shift+w"], "command": "insert_snippet", "args": { "name": "Packages/XML/long-tag.sublime-snippet" } },
  // the following crashes, do not test!
  //{ "keys": ["ctrl+l"], "command": "insert_snippet", "args": {"contents": "${1/./=/g}"} },
  //{ "keys": ["ctrl+h+r"], "command": "submit_code"},
  // { "keys": ["enter"], "command": "jsdocs",
  //   "context": [
  //     { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
  //     { "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*(\\/\\*|###)[*!]\\s*$", "match_all": true }
  //   ]
  // },

  // this is a test
  { "keys": [")"], "command": "run_macro_file",
    "args": {"file": "Packages/User/Delete Right and Move Right.sublime-macro"},
    "context": [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "not_equal", "operand": true, "match_all": true},
      { "key": "eval: view.substr(sel.end()) != ')'", "match_all": true}
    ]
  },


  // Python help file
  { "keys": ["ctrl+super+d"], "command": "python_print",
    "context": [
      {"key": "selector", "operator": "equal", "operand": "source.python"}
    ]
  },

  // test.py
  { "keys": ["ctrl+super+t"], "command": "test_command" },

  // pane cycle
  { "keys": ["ctrl+1"], "command": "cycle_panes" },

  // quick rulers
  { "keys": ["alt+r"], "command": "quick_rulers",
    "context": [
      { "key": "setting.is_widget", "operator": "equal", "operand": false }
    ]
  },

// other plugins:

  // select until
  { "keys": ["alt+shift+g"], "command": "select_until", "args": { "extend": false } },

  // python doc strings
  { "keys": ["ctrl+k", "ctrl+p"], "command": "fold_python_docstrings",
    "context": [
      {"key": "selector", "operator": "equal", "operand": "source.python"}
    ]
  },
  { "keys": ["ctrl+k", "ctrl+shift+p"], "command": "unfold_python_docstrings",
    "context": [
      {"key": "selector", "operator": "equal", "operand": "source.python"}
    ]
  },

  // Package Control
  { "keys": ["ctrl+alt+i"], "command": "install_package" },

  // PlainTasks
  { "keys": ["alt+x"], "command": "plain_tasks_complete",
    "context": [
      { "key": "selector", "operator": "equal", "operand": "text.todo" }
    ]
  },

  // switch to file
  { "keys": ["alt+e"], "command": "switch_to_file" },

  // open url
  { "keys": ["alt+o"], "command": "open_url" },

  // diff
  { "keys": ["ctrl+alt+d"], "command": "diff_changes" },
  { "keys": ["ctrl+alt+q"], "command": "quick_diff" },

  // AlignTab
  { "keys": ["ctrl+shift+a"], "command": "align_tab", "args": {"live_preview" : true} },

  // bracket highlighter
  { "keys": ["ctrl+shift+q"], "command": "bh_async_key", "args": {
    "lines": true,
    "plugin": { "command": "bh_modules.swapquotes",
                "type": ["single_quote", "double_quote", "py_single_quote", "py_double_quote"] } }
  },

  // Scope Hunter
  { "keys": ["ctrl+super+s"], "command": "get_selection_scope" },

  // advanced new file
  { "keys": ["f2"], "command": "advanced_new_file_move" },
  { "keys": ["ctrl+alt+shift+d"], "command": "advanced_new_file_copy" },
  { "keys": ["ctrl+k", "ctrl+n"], "command": "advanced_new_file_new" },
  { "keys": ["ctrl+k", "ctrl+shift+n"], "command": "advanced_new_file_new", "args": {"initial_path": "./"} },
]
