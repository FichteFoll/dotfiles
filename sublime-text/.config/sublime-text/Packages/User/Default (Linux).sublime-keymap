[
// BASIC REBINDS

  //["ctrl+;"] -> ctrl+ü
  { "keys": ["ctrl+e"], "command": "show_overlay", "args": {"overlay": "goto", "text": "#" } },
  //["ctrl+`"] -> ctrl+ö
  { "keys": ["f8"], "command": "show_panel", "args": {"panel": "console", "toggle": true} },

  // ["ctrl+shift+k"]
  { "keys": ["alt+d"], "command": "run_macro_file",
    "args": {"file": "Packages/Default/Delete Line.sublime-macro"} },
  // ["ctrl+shift+d"]
  { "keys": ["ctrl+d"], "command": "duplicate_line" },
  // old ctrl+d alternatives
  { "keys": ["ctrl+shift+d"], "command": "find_under_expand" },

  // run on shift+f7
  { "keys": ["shift+f7"], "command": "build", "args": {"variant": "Run"} },

  // smart-expand selection (overridden by LSP)
  { "keys": ["ctrl+shift+x"], "command": "expand_selection", "args": {"to": "smart"} },

  // Toggle comments (originally "ctrl+/", which uses "#" on the German keyboard (which I don't have with neo))
  { "keys": ["ctrl+7"], "command": "toggle_comment", "args": { "block": false } },
  { "keys": ["ctrl+shift+7"], "command": "toggle_comment", "args": { "block": true } },

  // Alternative binding for opening auto complete links
  { "keys": ["f1"], "command": "auto_complete_open_link", "context": [
      { "key": "auto_complete_visible", "operator": "equal", "operand": true },
    ]
  },

  // Diff hunks
  { "keys": ["ctrl+k", "ctrl+h"], "command": "toggle_inline_diff" },

  // Make keypad keys work for font size changes
  { "keys": ["ctrl+keypad_plus"],  "command": "increase_font_size" },
  { "keys": ["ctrl+keypad_minus"], "command": "decrease_font_size" },

  // allow [] to trigger "Add Line in Braces.sublime-macro" (mainly for json)
  { "keys": ["enter"], "command": "run_macro_file",
    "args": { "file": "Packages/Default/Add Line in Braces.sublime-macro" },
    "context": [
      { "key": "setting.auto_indent", "operand": true },
      { "key": "selection_empty", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "[\\{\\[]$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^[\\}\\]]", "match_all": true },
    ],
  },

  // copy this for altgr+enter for when I don't release the layer 3 modifier fast enough
  { "keys": ["altgr+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line in Braces.sublime-macro"}, "context":
    [
      { "key": "setting.auto_indent", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "\\{$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true }
    ]
  },

  // Auto-complete popup
  { "keys": ["ctrl+space"], "command": "auto_complete", "args": {"disable_auto_insert": true} },
  { "keys": ["ctrl+space"], "command": "replace_completion_with_auto_complete",
    "context": [
      { "key": "last_command", "operand": "insert_best_completion" },
      { "key": "auto_complete_visible", "operand": false },
      { "key": "setting.tab_completion", "operand": true },
    ],
  },

  // Word wrapping
  { "keys": ["ctrl+shift+w"], "command": "toggle_setting", "args": {"setting": "word_wrap"} },

  // indentation
  { "keys": ["ctrl+<"],   "command":   "indent" },
  { "keys": ["ctrl+>"],   "command": "unindent" },
  { "keys": ["ctrl+f12"], "command": "reindent" },

  // folding
  { "keys": ["ctrl+k", "ctrl+f"], "command":   "fold" },
  { "keys": ["ctrl+k", "ctrl+u"], "command": "unfold" },

  // 3-pane layout with single bottom group
  {
    "keys": ["alt+shift+4"],
    "command": "set_layout",
    "args":
    {
      "cols": [0.0, 0.5, 1.0],
      "rows": [0.0, 0.8, 1.0],
      "cells": [[0, 0, 1, 1], [1, 0, 2, 1], [0, 1, 2, 2]],
    },
  },

  // goto definition
  { "keys": ["ctrl+alt+r"], "command": "goto_definition" },

  // command palette
  { "keys": ["ctrl+alt+s"], "command": "show_overlay",
    "args": { "overlay": "command_palette", "text": "Set Syntax: " } },
  { "keys": ["ctrl+alt+b"], "command": "show_overlay",
    "args": { "overlay": "command_palette", "text": "Build With: " } },
  { "keys": ["ctrl+alt+g"], "command": "show_overlay",
    "args": { "overlay": "command_palette", "text": "git: " } },

  // make the "Build: Cancel" binding accessable
  { "keys": ["pause"], "command": "cancel_build" },

  // re-add project switcher binding (removed in 3096)
  { "keys": ["ctrl+shift+o"], "command": "prompt_select_workspace" },

  // Toggle exec output
  { "keys": ["ctrl+f4"], "command": "show_panel", "args": {"panel": "output.exec"} },
  { "keys": ["ctrl+f4"], "command": "hide_panel", "args": {"panel": "output.exec"},
    "context": [
      { "key": "panel", "operand": "output.exec" },
    ],
  },

  // Open special find panels
  { "keys": ["ctrl+alt+f"], "command": "slurp_find_string" },
  { "keys": ["ctrl+alt+shift+f"], "command": "slurp_replace_string" },

  // Improved auto-pairing in general
  // TODO ( [ { < " '
  // https://github.com/sublimehq/Packages/pull/2889

  // Auto-pair escaped curly brackets in tex
  { "keys": ["{"], "command": "insert_snippet", "args": {"contents": "{$0\\\\}"},
    "context": [
      { "key": "setting.auto_match_enabled", "operand": true },
      { "key": "selection_empty", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "\\\\$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(\\s|\\)|]|\\}|\\\\|$)", "match_all": true },
      { "key": "selector", "operand": "text.tex", "match_all": true },
    ],
  },
  { "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/User/Delete Left Right Twice.sublime-macro"},
    "context": [
      { "key": "setting.auto_match_enabled", "operand": true },
      { "key": "selection_empty", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "\\\\\\{$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\\\\\}", "match_all": true },
      { "key": "selector", "operand": "text.tex", "match_all": true },
    ],
  },
  // wrap selection with subscript or superscript
  { "keys": ["^"], "command": "insert_snippet", "args": {"contents": "^{${1:$SELECTION}}$0" },
    "context": [
      { "key": "setting.auto_match_enabled", "operand": true },
      { "key": "selection_empty", "operand": false, "match_all": true },
      { "key": "selector", "operand": "text.tex meta.environment.math" },
    ],
  },
  { "keys": ["_"], "command": "insert_snippet", "args": {"contents": "_{${1:$SELECTION}}$0"},
    "context": [
      { "key": "setting.auto_match_enabled", "operand": true },
      { "key": "selection_empty", "operand": false, "match_all": true },
      { "key": "selector", "operand": "text.tex meta.environment.math" },
    ],
  },

  // multi-selection (from Windows bindings)
  { "keys": ["ctrl+alt+up"], "command": "select_lines", "args": {"forward": false} },
  { "keys": ["ctrl+alt+down"], "command": "select_lines", "args": {"forward": true} },

  // navigation by blocks
  { "keys": ["alt+down"], "command": "move", "args": { "by": "stops", "empty_line": true, "forward": true } },
  { "keys": ["alt+up"], "command": "move", "args": { "by": "stops", "empty_line": true, "forward": false } },

// REVERT PACKAGE OVERRIDES

  // open url
  { "keys": ["ctrl+u"], "command": "soft_undo" },

// CUSTOM PLUGINS

  // Python help file
  { "keys": ["ctrl+super+d"], "command": "python_print",
    "context": [
      { "key": "selector", "operand": "source.python" },
    ],
  },

  // test.py
  { "keys": ["ctrl+super+t"], "command": "test_command" },

  // pane cycle
  { "keys": ["ctrl+1"], "command": "cycle_groups" },

  // reset mini diff
  { "keys": ["ctrl+k", "ctrl+s"], "command": "reset_mini_diff" },

  // quick rulers
  { "keys": ["alt+r"], "command": "quick_rulers",
    "context": [
      { "key": "setting.is_widget", "operand": false },
    ],
  },

// OTHER PLUGINS

  // Terminal
  { "keys": ["ctrl+k", "ctrl+t"], "command": "open_terminal" },
  { "keys": ["ctrl+k", "ctrl+shift+t"], "command": "open_terminal_project_folder" },

  // Restore File History binding (overridden by Terminal)
  { "keys": ["ctrl+shift+t"], "command": "open_recently_closed_file", "args": { "action": "open_latest_closed" } },

  // select until
  { "keys": ["alt+shift+g"], "command": "select_until", "args": {"extend": false} },

  // python doc strings
  { "keys": ["ctrl+k", "ctrl+p"], "command": "fold_python_docstrings",
    "context": [
      { "key": "selector", "operand": "source.python" },
    ],
  },
  { "keys": ["ctrl+k", "ctrl+shift+p"], "command": "unfold_python_docstrings",
    "context": [
      { "key": "selector", "operand": "source.python" },
    ],
  },

  // Package Control
  { "keys": ["ctrl+alt+i"], "command": "install_package" },

  // PlainTasks
  { "keys": ["alt+x"], "command": "plain_tasks_complete",
    "context": [
      { "key": "selector", "operand": "text.todo" },
    ],
  },

  // switch to file
  { "keys": ["alt+e"], "command": "switch_to_file" },

  // open url
  { "keys": ["alt+o"], "command": "open_url" },

  // diff
  { "keys": ["ctrl+alt+d"], "command": "diff_changes" },
  { "keys": ["ctrl+alt+q"], "command": "quick_diff" },

  // MultiEditUtils
  { "keys": ["ctrl+alt+c"], "command": "cycle_through_regions" },
  { "keys": ["ctrl+alt+u"], "command": "add_last_selection" },
  // { "keys": ["alt+s", "a"], "command": "add_last_selection" },
  { "keys": ["alt+f", "f"], "command": "selection_fields" , "args": {"only_other": true} },
  { "keys": ["alt+f", "a"], "command": "selection_fields", "args": {"mode": "add"} },
  { "keys": ["alt+f", "s"], "command": "selection_fields", "args": {"mode": "subtract"} },
  { "keys": ["alt+s", "p"], "command": "remove_empty_regions" }, // prune
  { "keys": ["alt+s", "S"], "command": "strip_selection" },
  { "keys": ["alt+s", "r"], "command": "normalize_region_ends" },
  { "keys": ["alt+s", "s"], "command": "split_selection" },
  // JumpTo (fork)
  { "keys": ["alt+s", "j"], "command": "jump_to_interactive" },
  { "keys": ["alt+s", "J"], "command": "jump_to_interactive", "args": {"whole_match": true} },
  { "keys": ["alt+s", "n"], "command": "jump_to_interactive", "args": {"create_new": true} },
  { "keys": ["alt+s", "N"], "command": "jump_to_interactive", "args": {"create_new": true, "whole_match": true} },
  { "keys": ["alt+s", "e"], "command": "jump_to_interactive", "args": {"extend": true} },
  { "keys": ["alt+s", "E"], "command": "jump_to_interactive", "args": {"extend": true, "whole_match": true} },

  // AlignTab
  { "keys": ["ctrl+shift+a"], "command": "align_tab", "args": {"live_preview" : true} },

  // Bracket Highlighter
  // https://facelessuser.github.io/BracketHighlighter/customize/#run-instance-plugins
  { "keys": ["ctrl+shift+q"], "command": "bh_key",
    "args": {
      "lines": true,
      "plugin": {
        "command": "bh_modules.swapquotes",
        "type": ["single_quote", "double_quote", "py_single_quote", "py_double_quote"],
      },
    },
  },
  { "keys": ["ctrl+m"], "command": "bh_key",
    "args": {
      "no_outside_adj": null,
      "lines": true,
      "plugin": {
        "command": "bh_modules.bracketselect",
        "args": { "select": "right", "alternate": true },
      },
    },
  },
  { "keys": ["ctrl+shift+m"], "command": "bh_key",
    "args": {
      "no_outside_adj": null,
      "plugin": {
        "command": "bh_modules.bracketselect",
      },
    },
  },

  // Scope Hunter
  { "keys": ["ctrl+super+s"], "command": "get_selection_scope" },

  // advanced new file
  { "keys": ["f2"], "command": "advanced_new_file_move" },
  { "keys": ["ctrl+alt+shift+d"], "command": "advanced_new_file_copy" },
  { "keys": ["ctrl+k", "ctrl+n"], "command": "advanced_new_file_new" },
  { "keys": ["ctrl+k", "ctrl+shift+n"], "command": "advanced_new_file_new", "args": {"initial_path": "./"} },

  // package reloader
  { "keys": ["ctrl+super+r"], "command": "package_reloader_reload" },

  // sublime linter
  { "keys": ["ctrl+k", "f"],
    "command": "sublime_linter_addon_cycle_filter_patterns",
    "args": {
      "patterns": ["-annotations:", "annotations:", ""],
    },
  },
  { "keys": ["ctrl+k", "h"], "command": "sublime_linter_toggle_highlights" },

  // Fmt
  { "keys": ["ctrl+alt+l"], "command": "fmt_format_selection" },
  { "keys": ["ctrl+alt+l"], "command": "fmt_format_buffer",
    "context": [
      { "key": "selection_empty", "match_all": true },
    ],
  },

  // LSP //////
  { "keys": ["alt+enter"],
    "command": "lsp_code_actions",
    "context": [
      { "key": "lsp.session_with_capability", "operand": "codeActionProvider" },
    ],
  },
  { "keys": ["alt+shift+enter"],
    "args": { "only_kinds": ["source"] },
    "command": "lsp_code_actions",
    "context": [
      { "key": "lsp.session_with_capability", "operand": "codeActionProvider.codeActionKinds" },
    ],
  },
  { "keys": ["f12"],
    "command": "lsp_symbol_definition",
    "args": { "side_by_side": false},
    "context": [
      { "key": "lsp.session_with_capability", "operator": "equal", "operand": "definitionProvider" },
      { "key": "auto_complete_visible", "operator": "equal", "operand": false },
    ],
  },
  { "keys": ["f4"],
    "command": "lsp_goto_diagnostic",
    "args": { "uri": "$view_uri" },
    "context": [
      { "key": "panel_visible", "operand": "output.diagnostics" },
    ],
  },
  { "keys": ["alt+f4"],
    "command": "lsp_goto_diagnostic",
    "context": [
      { "key": "panel_visible", "operand": "output.diagnostics" },
    ],
  },
  { "keys": ["shift+f6"],
    "command": "lsp_symbol_rename",
    "context": [
      { "key": "lsp.session_with_capability", "operand": "renameProvider" },
    ],
  },
  { "keys": ["shift+f7"],
    "command": "lsp_hover",
    "context": [
      { "key": "lsp.session_with_capability", "operand": "hoverProvider" },
    ],
  },
  { "keys": ["ctrl+alt+l"],
    "command": "lsp_format_document",
    "context": [
      { "key": "lsp.session_with_capability", "operand": "documentFormattingProvider | documentRangeFormattingProvider" },
    ],
  },
  { "keys": ["primary+r"],
    "command": "lsp_document_symbols",
    "context": [
      { "key": "lsp.session_with_capability", "operand": "documentSymbolProvider" },
    ],
  },
  { "keys": ["ctrl+shift+space"],
    "command": "lsp_expand_selection",
    "context": [
      { "key": "lsp.session_with_capability", "operand": "selectionRangeProvider" },
    ],
  },

  // toggle options in find panels (overrides alt+s from MultiEditTools)
  { "keys": ["alt+s"], "command": "toggle_in_selection",
    "context": [{"key": "panel_type", "operand": "find"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["alt+c"], "command": "toggle_show_context",
    "context": [{"key": "panel_type", "operand": "find"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["alt+w"], "command": "toggle_wrap",
    "context": [{"key": "panel_type", "operand": "find"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["alt+shift+w"], "command": "toggle_whole_word",
    "context": [{"key": "panel_type", "operand": "find"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["alt+c"], "command": "toggle_case_sensitive",
    "context": [{"key": "panel_type", "operand": "find"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["alt+shift+c"], "command": "toggle_preserve_case",
    "context": [{"key": "panel_type", "operand": "find"}, {"key": "panel_has_focus"}]
  },
]
