#!/usr/bin/env python3

"""Tool to fix font names as selected by Aegisub on Linux.

Aegisub (or wxWidgets, rather) selects the family name
instead of the font's face name,
which VSFilter doesn't handle at all
and libass seemingly only when the font is installed
as opposed to muxed into an mkv container,
which is probably why the selected fonts work within Aegisub.

fc-list and fc-match return two "family" names for some fonts,
where the latter is usually the "right" one (or rather: the desired one).

Since I most certainly can't bother to fix this upstream,
I made this little script to post-process the font names inserted by Aegisub.

Requires https://github.com/rfw/python-ass.
"""

import argparse
import functools
import itertools
import logging
import re
import subprocess
import sys

import ass

logger = logging.getLogger(__name__)
logger.addHandler(logging.StreamHandler())
logger.setLevel(logging.INFO)


def parse_args():
    parser = argparse.ArgumentParser(
        description="Fix bad font names as selected by Aegisub on Linux"
    )
    parser.add_argument("input", nargs='+', type=argparse.FileType('r'),
                        help="File to edit. Supports stdin (`-`, once).")
    parser.add_argument("-o", "--output", nargs='+', type=argparse.FileType('w'),
                        help="File to write to; otherwise modifies in-place."
                             " You must specify exactly as many output as input files."
                             " Supports stdout (`-`, once).")
    parser.add_argument("--skip-missing", action='store_true',
                        help="Continue when a font could not be found.")
    parser.add_argument("-v", "--verbose", action='store_true',
                        help="Increase verbosity.")

    return parser.parse_args()


def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx"
    args = [iter(iterable)] * n
    return itertools.zip_longest(*args, fillvalue=fillvalue)


def escape_font(name):
    # https://www.freedesktop.org/software/fontconfig/fontconfig-user.html#AEN36
    return re.sub(r"([\\:,-])", r"\\\1", name)


def unescape_font(name):
    return re.sub(r"\\(.)", r"\1", name)


@functools.lru_cache()
def find_actual_font_name(original_name, bold=False, italic=False):
    # $ fc-match "Fontin Sans:italic" family style
    # Fontin Sans,Fontin Sans Rg:style=Italic
    # $ fc-match "Fontin Sans:italic:bold" family style
    # Fontin Sans,Fontin Sans Rg:style=Bold Italic
    # $ fc-match "Fontin Sans" family style
    # Fontin Sans,Fontin Sans Rg:style=Regular
    # $ fc-match "Fontin Sans Rg" family style
    # Fontin Sans,Fontin Sans Rg:style=Regular
    # $ fc-match "FOT\\-STick Std" family style
    # FOT\-Stick Std,FOT\-Stick Std B:style=B,Regular
    query = escape_font(original_name)
    if bold:
        query += ":bold"
    if italic:
        query += ":italic"

    # output style just for debugging
    output = subprocess.check_output(["fc-match", query, "family", "style"],
                                     universal_newlines=True)
    output = output.strip()
    logger.debug('fc-match for "%s": %s', query, output)
    if not output:
        return None

    family, _, style = output.rpartition(':')
    families = family.split(',')
    return unescape_font(families[-1])  # last family name is the more accurate one


def main():
    params = parse_args()
    if len(params.input) != len(params.output):
        logger.error("Number of input and output files does not match")
    if params.verbose:
        logger.setLevel(logging.DEBUG)

    @functools.lru_cache()
    def should_replace(old_name, new_name):
        if new_name is None:
            logger.warning(f"Unable to find a match for '{old_name}'")
            return False if params.skip_missing else None
        elif new_name == old_name:
            logger.info(f"Font name for '{old_name}' unchanged")
            return False
        else:
            logger.info(f"Replacing '{old_name}' with '{new_name}'")
            return True

    for infile, outfile in zip(params.input, params.output):
        doc = ass.parse(infile)

        style_map = {}
        for style in doc.styles:
            style_map[style.name] = style
            new_fontname = find_actual_font_name(style.fontname, style.bold, style.italic)
            should = should_replace(style.fontname, new_fontname)
            if should is None:
                return 1
            elif should:
                style.fontname = new_fontname

        for event in doc.events:
            parts = re.split(r"(\{[^\}]*\})", event.text)
            styleref = style_map.get(event.style) or ass.document.Style()
            bold = styleref.bold
            italic = styleref.italic

            new_parts = []

            for text, block in grouper(parts, 2, ""):
                # track bold/italic flags
                for tag in re.findall(r"\\[ib]\d|\\r", block):
                    if tag[1] == "r":
                        bold = styleref.bold
                        italic = styleref.italic
                    elif tag[1] == "b":
                        bold = bool(int(tag[2]))
                    else:
                        italic = bool(int(tag[2]))

                new_part = text
                for rest, fontname in grouper(re.split(r"\\fn([^\\}]+)", block), 2, ""):
                    new_part += rest
                    if fontname:
                        new_fontname = find_actual_font_name(fontname, bold, italic)
                        should = should_replace(fontname, new_fontname)
                        if should is None:
                            return 1
                        elif should:
                            fontname = new_fontname
                        new_part += "\\fn" + fontname

                new_parts.append(new_part)

            event.text = "".join(new_parts)

        doc.dump_file(outfile)


if __name__ == '__main__':
    sys.exit(main())
